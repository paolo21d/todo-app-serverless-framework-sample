# For full config options, check the docs:
#    docs.serverless.com

service: todo-app-serverless-framework
app: todo-app-serverless-poc

frameworkVersion: "2"

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  region: us-east-1
  #  stage: dev

  # you can add statements to the Lambda function's IAM Role here
  #  iamRoleStatements:
  #    - Effect: "Allow"
  #      Action:
  #        - "s3:ListBucket"
  #      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
  #    - Effect: "Allow"
  #      Action:
  #        - "s3:PutObject"
  #      Resource:
  #        Fn::Join:
  #          - ""
  #          - - "arn:aws:s3:::"
  #            - "Ref" : "ServerlessDeploymentBucket"
  #            - "/*"

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.TODO_LISTS_DYNAMO_DB_TABLE_NAME}"

  environment:
    TODO_LISTS_DYNAMO_DB_TABLE_NAME: TodoListsTable
#    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}

functions:
  hello:
    handler: src/handlers.hello
    events:
      - httpApi:
          path: /test
          method: get


  createTodoList:
    handler: src/handlers.createTodoList
    events:
      - http:
          path: /list
          method: post
          cors: true

  getTodoList:
    handler: src/handlers.getTodoList
    events:
      - http:
          path: /list/{listId}
          method: get
          cors: true

  updateTodoList:
    handler: src/handlers.updateTodoList
    events:
      - http:
          path: /list/{listId}
          method: put
          cors: true

  deleteTodoList:
    handler: src/handlers.deleteTodoList
    events:
      - http:
          path: /list/{listId}
          method: delete
          cors: true

  createTodoItem:
    handler: src/handlers.createTodoItem
    events:
      - http:
          path: /list/{listId}/item
          method: post
          cors: true

  updateTodoItem:
    handler: src/handlers.updateTodoItem
    events:
      - http:
          path: /list/{listId}/item/{itemId}
          method: put
          cors: true

  deleteTodoItem:
    handler: src/handlers.deleteTodoItem
    events:
      - http:
          path: /list/{listId}/item/{itemId}
          method: delete
          cors: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-dynamodb-local

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      # Comment if you don't have a DynamoDB running locally
    #      noStart: true
    migration:
      dir: offline/migrations


# you can add CloudFormation resource templates here
resources:
  Resources:
    TodoListsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: listId
            AttributeType: S
        KeySchema:
          - AttributeName: listId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.TODO_LISTS_DYNAMO_DB_TABLE_NAME}